
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PRIME.Core.MedCheck;
//
//    var drugResponse = DrugResponse.FromJson(jsonString);

namespace PRIME.Core.MedCheck.Drug
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;


    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using PRIME.Core.MedCheck;
    //
    //    var drugResponse = DrugResponse.FromJson(jsonString);



        public partial class DrugResponse
        {
            [JsonProperty("nlmDisclaimer")]
            public string NlmDisclaimer { get; set; }

            [JsonProperty("userInput")]
            public UserInput UserInput { get; set; }

            [JsonProperty("interactionTypeGroup")]
            public List<InteractionTypeGroup> InteractionTypeGroup { get; set; }
        }

        public partial class InteractionTypeGroup
        {
            [JsonProperty("sourceDisclaimer")]
            public string SourceDisclaimer { get; set; }

            [JsonProperty("sourceName")]
            public string SourceName { get; set; }

            [JsonProperty("interactionType")]
            public List<InteractionType> InteractionType { get; set; }
        }

        public partial class InteractionType
        {
            [JsonProperty("comment")]
            public string Comment { get; set; }

            [JsonProperty("minConceptItem")]
            public MinConceptItem MinConceptItem { get; set; }

            [JsonProperty("interactionPair")]
            public List<InteractionPair> InteractionPair { get; set; }
        }

        public partial class InteractionPair
        {
            [JsonProperty("interactionConcept")]
            public List<InteractionConcept> InteractionConcept { get; set; }

            [JsonProperty("severity")]
            public Severity Severity { get; set; }

            [JsonProperty("description")]
            public string Description { get; set; }
        }

        public partial class InteractionConcept
        {
            [JsonProperty("minConceptItem")]
            public MinConceptItem MinConceptItem { get; set; }

            [JsonProperty("sourceConceptItem")]
            public SourceConceptItem SourceConceptItem { get; set; }
        }

        public partial class MinConceptItem
        {
            [JsonProperty("rxcui")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Rxcui { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            //[JsonProperty("tty")]
            //public Tty Tty { get; set; }
        }

        public partial class SourceConceptItem
        {
            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("url")]
            public Uri Url { get; set; }
        }

        public partial class UserInput
        {
            [JsonProperty("sources")]
            public List<string> Sources { get; set; }

            [JsonProperty("rxcui")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Rxcui { get; set; }
        }

        //public enum Tty { In, Pin };

        public enum Severity { NA };

        public partial class DrugResponse
        {
            public static DrugResponse FromJson(string json) => JsonConvert.DeserializeObject<DrugResponse>(json, Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this DrugResponse self) => JsonConvert.SerializeObject(self);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
           //     TtyConverter.Singleton,
                SeverityConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }

        //internal class TtyConverter : JsonConverter
        //{
        //    public override bool CanConvert(Type t) => t == typeof(Tty) || t == typeof(Tty?);

        //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        //    {
        //        if (reader.TokenType == JsonToken.Null) return null;
        //        var value = serializer.Deserialize<string>(reader);
        //        switch (value)
        //        {
        //            case "IN":
        //                return Tty.In;
        //            case "PIN":
        //                return Tty.Pin;
        //        }
        //        throw new Exception("Cannot unmarshal type Tty");
        //    }

        //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        //    {
        //        if (untypedValue == null)
        //        {
        //            serializer.Serialize(writer, null);
        //            return;
        //        }
        //        var value = (Tty)untypedValue;
        //        switch (value)
        //        {
        //            case Tty.In:
        //                serializer.Serialize(writer, "IN");
        //                return;
        //            case Tty.Pin:
        //                serializer.Serialize(writer, "PIN");
        //                return;
        //        }
        //        throw new Exception("Cannot marshal type Tty");
        //    }

        //    public static readonly TtyConverter Singleton = new TtyConverter();
        //}

        internal class SeverityConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Severity) || t == typeof(Severity?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                if (value == "N/A")
                {
                    return Severity.NA;
                }
                throw new Exception("Cannot unmarshal type Severity");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Severity)untypedValue;
                if (value == Severity.NA)
                {
                    serializer.Serialize(writer, "N/A");
                    return;
                }
                throw new Exception("Cannot marshal type Severity");
            }

            public static readonly SeverityConverter Singleton = new SeverityConverter();
        }
    }

