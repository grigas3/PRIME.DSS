using System;
using System.Collections.Generic;
using System.Text;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PRIME.Core.MedCheck;
//
//    var drugResponse = DrugResponse.FromJson(jsonString);

namespace PRIME.Core.MedCheck.Gene
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    public class CheckResponse
    {
        [JsonProperty("drugs")]
        public List<PRIMEInteraction> Drugs { get; set; }
        [JsonProperty("genes")]
        public List<PRIMEInteraction> Genes { get; set; }
    }

    public class PRIMEInteraction
    {
        [JsonProperty("source")]
        public string Source { get; set; }
        [JsonProperty("target")]
        public string Target { get; set; }

        [JsonProperty("interaction")]
        public string Interaction { get; set; }

        public string Uri { get; set; }

    }
    public partial class GeneResponse
    {
        [JsonProperty("matchedTerms")]
        public List<Term> MatchedTerms { get; set; }

        [JsonProperty("ambiguousTerms")]
        public List<Term> AmbiguousTerms { get; set; }

        [JsonProperty("unmatchedTerms")]
        public List<string> UnmatchedTerms { get; set; }
    }

    public partial class Term
    {
        [JsonProperty("searchTerm")]
        public string SearchTerm { get; set; }

        [JsonProperty("geneName")]
        public string GeneName { get; set; }

        [JsonProperty("geneLongName")]
        public string GeneLongName { get; set; }

        [JsonProperty("entrezId")]
        public long EntrezId { get; set; }

        [JsonProperty("geneCategories")]
        public List<GeneCategory> GeneCategories { get; set; }

        [JsonProperty("interactions")]
        public List<Interaction> Interactions { get; set; }
    }

    public partial class GeneCategory
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Interaction
    {
        [JsonProperty("geneName")]
        public string GeneName { get; set; }

        [JsonProperty("interactionId")]
        public Guid InteractionId { get; set; }

        [JsonProperty("interactionTypes")]
        public List<InteractionType> InteractionTypes { get; set; }

        [JsonProperty("drugName")]
        public string DrugName { get; set; }

        [JsonProperty("drugChemblId")]
        public string DrugChemblId { get; set; }

        [JsonProperty("sources")]
        public List<string> Sources { get; set; }

        [JsonProperty("pmids")]
        public List<long> Pmids { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }
    }

    public enum InteractionType { Activator, Agonist, Antagonist, Inhibitor, InteractionTypeInhibitor };

    public partial class GeneResponse
    {
        public static GeneResponse FromJson(string json) => JsonConvert.DeserializeObject<GeneResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GeneResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                InteractionTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class InteractionTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InteractionType) || t == typeof(InteractionType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Inhibitor":
                    return InteractionType.InteractionTypeInhibitor;
                case "activator":
                    return InteractionType.Activator;
                case "agonist":
                    return InteractionType.Agonist;
                case "antagonist":
                    return InteractionType.Antagonist;
                case "inhibitor":
                    return InteractionType.Inhibitor;
            }
            throw new Exception("Cannot unmarshal type InteractionType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InteractionType)untypedValue;
            switch (value)
            {
                case InteractionType.InteractionTypeInhibitor:
                    serializer.Serialize(writer, "Inhibitor");
                    return;
                case InteractionType.Activator:
                    serializer.Serialize(writer, "activator");
                    return;
                case InteractionType.Agonist:
                    serializer.Serialize(writer, "agonist");
                    return;
                case InteractionType.Antagonist:
                    serializer.Serialize(writer, "antagonist");
                    return;
                case InteractionType.Inhibitor:
                    serializer.Serialize(writer, "inhibitor");
                    return;
            }
            throw new Exception("Cannot marshal type InteractionType");
        }

        public static readonly InteractionTypeConverter Singleton = new InteractionTypeConverter();
    }
}

